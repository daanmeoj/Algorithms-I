import java.util.NoSuchElementException;

public class LinkedList {
	private Node first;
	private Node last;
	private int size;
	
	private class Node {
		private int value;
		private Node next;
		Node(int value){
			this.value=value;
		}
	}
	public void addLast(int item) {
		Node node=new Node(item);
		if(isEmpty()) 
			first=last=node;
		else {
			last.next=node;
			last=node;
		}
		
	}
	
	public void removeFirst() {
		if(isEmpty())throw new NoSuchElementException();
		size--;
		if(first==last) {
			first=last=null;
			return;
		}
		Node second=first.next;
		first.next=null;
		first=second;
	}
	
	public void addFirst(int item) {
		Node node=new Node(item);
		if(isEmpty()) 
			first=last=node;
		else {
			node.next=first;
			first=node;
		}
		size++;

	}
	
	public int indexOF(int item) {
		Node current=first;
		int index=0;
		while(current!=null) {
			if(current.value==item)
				return index;
			current=current.next;
			index++;
		}
		return -1;
	}
	
	public boolean contains(int item) {
	 return indexOF(item)!=-1;
	}
	
	private boolean isEmpty() {
		return first==null;
	}

	public Node getPrevious(Node node) {
		Node current=first;
		while(current!=null) {
			if(current.next==node)return current;
			current=current.next;
		}
		return null;
	}
	
	public void removeLast() {
		if(isEmpty())throw new NoSuchElementException();
		size--;
		if(first==last) {
			first=last=null;
			return;
		}
		Node previous=getPrevious(last);
		last=previous;
		previous.next=null;
	}

}
